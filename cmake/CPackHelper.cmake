macro(INIT_INSTALLER GENERATOR INSTALLER_COMPONENTS)

	set(CPACK_GENERATOR ${GENERATOR})

	set(CPACK_PACKAGE_NAME "${BRAND_NAME}_Setup")
	set(CPACK_PACKAGE_BRANDING "${BRAND_NAME}")
#	set(CPACK_PACKAGE_FILE_NAME "${BRAND_NAME}Setup_v${BRAND_VERSION}")
	set(CPACK_PACKAGE_VENDOR "${BRAND_COMPANYNAME}")
	set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${BRAND_FULLNAME} Installation Package")
	set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/resources/license_en.txt")
	set(CPACK_MUI_HEADERIMAGE_BITMAP  "${CMAKE_SOURCE_DIR}/resources/setup-banner.bmp")
#	set(CPACK_MUI_HEADERBMP_CUSTOM_UI "${CMAKE_SOURCE_DIR}/cmake/CPack/UIs/modern_headerbmp.exe")
	string(REPLACE "/" "\\\\" BRAND_ICON_FILE ${BRAND_ICON_FILE})
	string(REPLACE "/" "\\\\" CPACK_MUI_HEADERIMAGE_BITMAP ${CPACK_MUI_HEADERIMAGE_BITMAP})
	set(CPACK_PACKAGE_ICON ${CPACK_MUI_HEADERIMAGE_BITMAP})
#	string(REPLACE "/" "\\\\" CPACK_MUI_WELCOMEFINISHPAGE_BITMAP ${CPACK_MUI_WELCOMEFINISHPAGE_BITMAP})
#	string(REPLACE "/" "\\\\" CPACK_MUI_HEADERBMP_CUSTOM_UI ${CPACK_MUI_HEADERBMP_CUSTOM_UI})

	string(REPLACE "." ";" VERSION_LIST ${BRAND_VERSION})
	list(GET VERSION_LIST 0 MAJOR_VERSION)
	list(GET VERSION_LIST 1 MINOR_VERSION)
	list(GET VERSION_LIST 2 PATCH_VERSION)
	list(GET VERSION_LIST 3 BUILD_VERSION)

	set(CPACK_PACKAGE_VERSION "${BRAND_VERSION}")
	set(CPACK_PACKAGE_VERSION_MAJOR "${MAJOR_VERSION}")
	set(CPACK_PACKAGE_VERSION_MINOR "${MINOR_VERSION}")
	set(CPACK_PACKAGE_VERSION_PATCH "${PATCH_VERSION}")
	set(CPACK_PACKAGE_VERSION_BUILD "${BUILD_VERSION}")
	set(CPACK_PACKAGE_COPYRIGHT "Copyright (C) 2016 ${BRAND_COMPANYNAME}")
	set(CPACK_PACKAGE_DESCRIPTION ${BRAND_SERVICE_DESCRIPTION})
	set(CPACK_PACKAGE_DOMAIN ${BRAND_DOMAIN})

	set(CPACK_PACKAGE_INSTALL_DIRECTORY "${BRAND_FULLNAME}")
	set(CPACK_PACKAGE_PROGRAM_DATA_SUBDIRECTORY "${BRAND_FULLNAME}")
	set(CPACK_PACKAGE_STARTMENU_FOLDER "${BRAND_FULLNAME}")

	set(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE 1)
	set(CPACK_COMPONENTS_IGNORE_GROUPS 1)

	if(${CPACK_GENERATOR} STREQUAL "NSIS")
		set(CPACK_${CPACK_GENERATOR}_MODIFY_PATH ON)
		set(CPACK_${CPACK_GENERATOR}_DISPLAY_NAME "${BRAND_FULLNAME}")
		set(CPACK_${CPACK_GENERATOR}_URL_INFO_ABOUT "${BRAND_DOMAIN}")
		set(CPACK_${CPACK_GENERATOR}_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
		set(CPACK_${CPACK_GENERATOR}_MUI_ICON ${BRAND_ICON_FILE})
		set(CPACK_NSIS_PACKAGE_NAME ${BRAND_FULLNAME})
		#set(CPACK_${CPACK_GENERATOR}_MUI_HEADERIMAGE_BITMAP_CODE "!define MUI_HEADERIMAGE_BITMAP '${CPACK_MUI_HEADERIMAGE_BITMAP}'")
		set(CPACK_${CPACK_GENERATOR}_INSTALLED_ICON_NAME "mainIcon.ico")
		set(CPACK_${CPACK_GENERATOR}_COMPRESSOR "/SOLID lzma")

	endif(${CPACK_GENERATOR} STREQUAL "NSIS")
	
	set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "${BRAND_FULLNAME}")

	set(CPACK_BUILD_ROOT "${CMAKE_BINARY_DIR}")
	string(REPLACE "/" "\\\\" CPACK_BUILD_ROOT ${CPACK_BUILD_ROOT})

	INIT_INSTALLER_COMPONENTS("${GENERATOR}" "${INSTALLER_COMPONENTS}")

	set(CPACK_MONOLITHIC_INSTALL 1) # do not show components list with checkboxes

	if(CMAKE_CL_64)
		set(CPACK_NSIS_INSTALL_ROOT "$PROGRAMFILES64")
		set(CPACK_NSIS_ONINIT "
\\\${If} \\\${RunningX64}
			SetRegView 64
\\\${Else}
			MessageBox MB_OK \\\"You try to install 64 bit version to Windows 32 bit. Please download and install 32 bit version.\\\"
			Quit
\\\${EndIf}")
	else()
		set(CPACK_NSIS_ONINIT "
\\\${If} \\\${RunningX64}
			MessageBox MB_OK \\\"You try to install 32 bit version to Windows 64 bit. Please download and install 64 bit version.\\\"
			Quit
\\\${Else}
			SetRegView 32
\\\${EndIf}")
	endif()

endmacro(INIT_INSTALLER GENERATOR)

macro(INIT_INSTALLER_COMPONENTS GENERATOR INSTALLER_COMPONENTS)
	foreach(COMPONENT ${INSTALLER_COMPONENTS})
		set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} ${COMPONENT})

		# Extra preinstall commands
		if(INSTALLER_${COMPONENT}_EXTRA_PREINSTALL_COMMANDS)
			set(CPACK_${GENERATOR}_EXTRA_PREINSTALL_COMMANDS 
				"${CPACK_${GENERATOR}_EXTRA_PREINSTALL_COMMANDS}
${INSTALLER_${COMPONENT}_EXTRA_PREINSTALL_COMMANDS}"
			)
		endif(INSTALLER_${COMPONENT}_EXTRA_PREINSTALL_COMMANDS)

		# Extra install commands
		if(INSTALLER_${COMPONENT}_EXTRA_INSTALL_COMMANDS)
			set(CPACK_${GENERATOR}_EXTRA_INSTALL_COMMANDS 
				"${CPACK_${GENERATOR}_EXTRA_INSTALL_COMMANDS}
${INSTALLER_${COMPONENT}_EXTRA_INSTALL_COMMANDS}"
			)
		endif(INSTALLER_${COMPONENT}_EXTRA_INSTALL_COMMANDS)

		# Extra uninstall commands
		if(INSTALLER_${COMPONENT}_EXTRA_UNINSTALL_COMMANDS)
			set(CPACK_${GENERATOR}_EXTRA_UNINSTALL_COMMANDS 
				"${INSTALLER_${COMPONENT}_EXTRA_UNINSTALL_COMMANDS}
${CPACK_${GENERATOR}_EXTRA_UNINSTALL_COMMANDS}"
			)
		endif(INSTALLER_${COMPONENT}_EXTRA_UNINSTALL_COMMANDS)

	endforeach(COMPONENT ${INSTALLER_COMPONENTS})
endmacro(INIT_INSTALLER_COMPONENTS INSTALLER_COMPONENTS GENERATOR)

macro(INCLUDE_CPACK)
	# Should always be the last!
	include(CPack)
endmacro(INCLUDE_CPACK)
